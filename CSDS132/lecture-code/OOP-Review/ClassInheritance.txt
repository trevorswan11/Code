Suppose we wan't to make a class called Phone
    public class Phone extends Object{
        public void makeCall(PhoneNumber number) {
            ...
        }
    }

Then we want to create a CellPhone class that can make use of the Phone class methods
    public class CellPhone extends Phone {
        public boolean sendText(PhoneNumber number, String text) {
            ...
        }
    }

Then we want to create a SmartPhone class that can use all methods above
    public class SmartPhone extends CellPhone {
        /* a method to download an app */
        public void downloadApp(App app) {
            /* some code goes here */
        }

        /* a method to use an app */
        public void useApp(App app) {
            /* some code goes here */
        }

        // <- Note that SmartPhone inherits makeCall and sendText from CellPhone
    }

Then we want to create an iPhone class
    public class iPhone extends SmartPhone {
        // <- iPhone inherits makeCall, sendText, downloadApp, and useApp from CellPhone
        // <- iPhone will change the behavior of downloadApp so that it gets the app from the AppStore
        // <- changing the behavior of a method is called "overriding" the method

        // You need to override downloadApp and useApp so that they are using Apples native features 
        @Override
        public void downloadApp(App app) {
            ...
        }

        @Override
        public ... {
            ...
        }
    }
Remember that Overrides have the exact same call and inputs, but the method body is different in the child class when compared to the parent

Then we want to make an Android class
    public class AndroidPhone extends SmartPhone {
        // You need to override downloadApp and useApp such that they only use Android native features
        @Override
        public ... {
            ...
        }

        @Override
        public ... {
            ...
        }
    }
